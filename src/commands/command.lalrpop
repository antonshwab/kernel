
// K-like interpreter

use commands::ast::*;
use core::str::FromStr;
grammar;

// Pure Tokens
pub Space:     Token = { " " => Token::Space, };
pub Semi:      Token = { ";" => Token::Semi, };
pub Colon:     Token = { ":" => Token::Colon, };
pub View:      Token = { "::" => Token::View, };
pub Cond:      Token = { <c:r"\$\["> => Token::Cond, };
pub Assign:    Token = { <a:r"[+\x2D*%!&|<>=~,^#_$?@.]:"> => Token::Assign, }; 
pub Apply:     Token = { "\." => Token::Apply, };
pub OpenB:     Token = { "[" => Token::OpenB, };
pub OpenP:     Token = { "(" => Token::OpenP, };
pub OpenC:     Token = { "{" => Token::OpenC, };
pub CloseB:    Token = { "]" => Token::CloseB, };
pub CloseP:    Token = { ")" => Token::CloseP, };
pub CloseC:    Token = { "}" => Token::CloseC, };

// Containers
pub Number:    AST = { <n:r"\d+"> => AST::Number( u64::from_str(n).unwrap()), };
pub Hexlit:    AST = { <h:r"0x[a-zA-Z\d]+"> => AST::Number( u64::from_str_radix(&h[2..], 16).unwrap()), };
pub Bool:      AST = { <b:r"[01]+b"> => AST::Bool(bool::from_str(b).unwrap()), };
pub Name:      AST = { <n:r"[a-zA-Z][-a-zA-Z\d]*"> => AST::Name(String::from(n)), };
pub Symbol:    AST = { <s:r"`([a-z.][a-z0-9.]*)?"> => AST::Symbol(String::from(s)), };
pub Verb:      AST = { <v:r"[+\x2D*%!&|<>=~,^#_$?@.]"> => AST::Verb(Verb::from_str(v).unwrap()), };
pub Ioverb:    AST = { <i:r"\d:"> => AST::Ioverb(String::from(i)), };
pub Adverb:    AST = { <a:r"['\x5C\x2F]:?"> => AST::Adverb(String::from(a)), };

// Calls
pub Mex:       AST = { Expr, <o:Expr> "\n" <m:Mex> => AST::Cons(Box::new(o),Box::new(m)), };
pub Expr:      AST = { Noun, "(" <o:List> ")" => o };
pub Noun:      AST = { Name, Number, Hexlit, Bool, Symbol, Lambda };
pub List:      AST = { <o:Expr> => AST::Cons(Box::new(o),Box::new(AST::Nil)),
                       <o:Expr> <m:SpaceList> => AST::Cons(Box::new(o),Box::new(m)),
                       <o:Expr> <m:CommaList> => AST::Cons(Box::new(o),Box::new(m)), };
pub SpaceList: AST = { " " <m:List> => m };
pub CommaList: AST = { "," <m:List> => m };
pub Lambda:    AST = { "{" "[" <c:List> "]" <body:Mex> "}" => AST::Lambda(Box::new(c),Box::new(body)), };
