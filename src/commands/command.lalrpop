
// O: The Kernel DSL by 5HT et all.

use commands::ast;
use commands::ast::*;
use core::str::FromStr;
grammar;

// Nouns

pub Number:         AST = { <n:r"\d+"> => AST::Number( u64::from_str(n).unwrap()), };
pub Hexlit:         AST = { <h:r"0x[a-zA-Z\d]+"> => AST::Number(u64::from_str_radix(&h[2..], 16).unwrap()), };
pub Bool:           AST = { <b:r"[01]+b"> => AST::Number(u64::from_str_radix(&b[0..String::from(b).len()-1], 2).unwrap()), };
pub Name:           AST = { <n:r"[a-zA-Z][-a-zA-Z\d]*"> => AST::Name(String::from(n)), };
pub Symbol:         AST = { <s:r"`([a-z.][a-z0-9.]*)?"> => AST::Symbol(String::from(s)), };
pub Ioverb:         AST = { <i:r"\d+:"> => AST::Ioverb(String::from(i)), };
pub List:           AST = { "(" ")" => AST::Nil, "(" <l:RawList> ")" => AST::List(Box::new(l)), };
pub Dict:           AST = { "[" "]" => AST::Nil, "[" <l:RawDict> "]" => AST::Dict(Box::new(l)), };
pub Args:           AST = { "[" "]" => AST::Nil, "[" <l:RawList> "]" => l, };
pub Call:           AST = { <c:Noun> <a:Args> => AST::Call(Box::new(c),Box::new(a)) };
pub Lambda:         AST = { "{" "[" <c:RawList> "]" <m:PreExpr> "}" => AST::Lambda(Box::new(c),Box::new(m)),
                            "{" <m:PreExpr> "}" => AST::Lambda(Box::new(AST::Nil),Box::new(m)), };

// Language

pub Adverb:      Adverb = { <a:r"['\x5C\x2F]:?"> => Adverb::from_str(a).unwrap(), };
pub Verb:          Verb = { <v:r"[+\x2D*%!&|<>=~,^#_$?@.]"> => Verb::from_str(v).unwrap(), };
pub Noun:           AST = { Name, Number, Hexlit, Bool, Symbol, Lambda, List, Call, Dict };
pub Statement:      AST = { <l:PreExpr> <v:Verb> <r:Noun>   => ast::stmt(AST::Verb(v),l,r),
                            <l:PreExpr> <v:Adverb> <r:Noun> => ast::stmt(AST::Adverb(v),l,r) };

// Expressions

pub Mex:            AST = { Expr, <o:Expr> "\n" <m:Mex> => AST::Cons(Box::new(o),Box::new(m)), };
pub Assign:         AST = { <n:PreExpr> ":" <o:Expr> => AST::Assign(Box::new(n),Box::new(o)), };
pub PreExpr:        AST = { Noun, Statement, <v:Verb> => AST::Verb(v), Ioverb };
pub Expr:           AST = { PreExpr, Assign };

// Lists

pub SemiList:       AST = { ";" <m:RawList> => m };
pub RawList:        AST = { <o:PreExpr> => AST::Cons(Box::new(o),Box::new(AST::Nil)),
                            <o:PreExpr> <m:SemiList> => AST::Cons(Box::new(o),Box::new(m)), };


// Dictionaries

pub SemiDict:       AST = { ";" <m:RawDict> => m };
pub RawDict:        AST = { <o:Assign> => AST::Cons(Box::new(o),Box::new(AST::Nil)),
                            <o:Assign> <m:SemiDict> => AST::Cons(Box::new(o),Box::new(m)), };

