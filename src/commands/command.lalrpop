
// M-expressions grammar

use commands::ast::AST;
use core::str::FromStr;
grammar;

pub Mex:       AST = { Operator, <o:Operator> Whitespace <m:Mex> => AST::Cons(Box::new(o),Box::new(m)), };
pub Operator:  AST = { Expr, Call, Lambda };
pub Call:      AST = { <n:Name> "[" <c:CommaList> "]" => AST::Call(Box::new(n),Box::new(c)), };
pub Lambda:    AST = { "{" "[" <c:CommaList> "]" <body:Mex> "}" => AST::Lambda(Box::new(c),Box::new(body)), };
pub Whitespace:AST = { "\n" => AST::Nil, "\t" => AST::Nil, "\r" => AST::Nil, "\s" => AST::Nil };
pub Terminal:  AST = { Name, Number };
pub Term:      AST = { Terminal, "(" <Expr> ")" };
pub Reduce:    AST = { "/" <s:Symbol> => AST::Reduce(Box::new(s)), };
// Tokenizer
pub Number:    AST = { <n:r"\d+"> => AST::Number( u64::from_str(n).unwrap()), };
pub Hexlit:    AST = { <h:r"0x[a-zA-Z\d]+"> => AST::Number( u64::from_str_radix(&h[2..], 16).unwrap()), };
pub Bool:      AST = { <b:r"[01]+b"> => AST::Bool(bool::from_str(b).unwrap()), };
pub Name:      AST = { <n:r"[a-zA-Z][-a-zA-Z\d]*"> => AST::Name(String::from(n)), };
pub Symbol:    AST = { <s:r"`([a-z.][a-z0-9.]*)?"> => AST::Symbol(String::from(s)), };
pub Verb:      AST = { <v:r"[+\x2D*%!&|<>=~,^#_$?@.]"> => AST::Verb(String::from(v)), };   
pub Assign:    AST = { <a:r"[+\x2D*%!&|<>=~,^#_$?@.]:"> => AST::Assign, }; 
pub Ioverb:    AST = { <i:r"\d:"> => AST::Ioverb(String::from(i)), };         
pub Adverb:    AST = { <a:r"['\x5C\x2F]:?"> => AST::Adverb(String::from(a)), };
pub Semi:      AST = { ";" => AST::Semi, };
pub Colon:     AST = { ":" => AST::Colon, };
pub View:      AST = { "::" => AST::View, };
pub Cond:      AST = { <c:r"\$\["> => AST::Cond, };
pub Dict:      AST = { <d:r"\[[a-z]+:"> => AST::Dict(String::from(d)), };
pub Apply:     AST = { "\." => AST::Apply, };
pub OpenB:     AST = { "[" => AST::OpenB, };
pub OpenP:     AST = { "(" => AST::OpenP, };
pub OpenC:     AST = { "{" => AST::OpenC, };
pub CloseB:     AST = { "]" => AST::CloseB, };
pub CloseP:     AST = { ")" => AST::CloseP, };
pub CloseC:     AST = { "}" => AST::CloseC, };
//
pub CommaList: AST = { <c:Mex> => AST::Cons(Box::new(c),Box::new(AST::Nil)),
                       <c:Mex> "," <e:CommaList> => AST::Cons(Box::new(c),Box::new(e)), };
pub Expr:      AST = { <l:Expr> "+" <r:Term> => AST::Plus(Box::new(l),Box::new(r)),
                       <l:Expr> "*" <r:Term> => AST::Times(Box::new(l),Box::new(r)),
                       <l:Expr> "%" <r:Term> => AST::Divide(Box::new(l),Box::new(r)),
                       <l:Expr> "-" <r:Term> => AST::Minus(Box::new(l),Box::new(r)), Term };
//pub Factor:    AST = { <l:Factor> "*" <r:Term> => AST::Mul(Box::new(l),Box::new(r)),
//                       <l:Factor> "%" <r:Term> => AST::Div(Box::new(l),Box::new(r)), Factor, };
