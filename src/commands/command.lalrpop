use commands::ast::*;
use core::str::FromStr;
    grammar<'ast>(arena: &'ast Arena<'ast>);

Decimal:   AST<'ast> = { <n:r"\d+">            => AST::Atom(Atom::Value(Value::Number(i64::from_str(n).unwrap()))), };
Hex:       AST<'ast> = { <h:r"0x[a-zA-Z\d]+">  => AST::Atom(Atom::Value(Value::Number(i64::from_str_radix(&h[2..], 16).unwrap()))), };
Bin:       AST<'ast> = { <b:r"[01]+b">         => AST::Atom(Atom::Value(Value::Number(i64::from_str_radix(&b[0..b.len()-1], 2).unwrap()))), };
Ioverb:    AST<'ast> = { <i:r"\d+:">           => AST::Atom(Atom::Value(Value::Ioverb(String::from(i)))), };

Name:      AST<'ast> = { <n:r"[a-zA-Z][a-zA-Z\d]*"> => arena.intern(String::from(n)), };
Symbol:    AST<'ast> = { <s:r"`([a-z][a-z0-9]*)?">  => arena.intern_symbol(String::from(&s[1..s.len()])), };

Sequence:  AST<'ast> = { <s:r"\x22(\\.|[^\x5C\x22])*\x22">     => arena.intern_sequence(String::from(&s[1..s.len()-1])), };
Adverb:       Adverb = { <a:r"[\x27:\x5C\x2F]:?">              => Adverb::from_str(a).unwrap(), };

RelVerbEq:  Verb = { <v: "=">   => Verb::from_str(v).unwrap(), };
RelVerbNEq: Verb = { <v: "<>">  => Verb::from_str(v).unwrap(), };
RelVerbGt:  Verb = { <v: ">">   => Verb::from_str(v).unwrap(), };
RelVerbGe:  Verb = { <v: ">=">  => Verb::from_str(v).unwrap(), };
RelVerbLt:  Verb = { <v: "<">   => Verb::from_str(v).unwrap(), };
RelVerbLe:  Verb = { <v: "<=">  => Verb::from_str(v).unwrap(), };
RelVerb:    Verb = { RelVerbEq, RelVerbNEq, RelVerbGt, RelVerbGe, RelVerbLt, RelVerbLe };

VerbSingle: Verb = { <v:r"[+\x2D*$%!&|~,^#_?@.]">   => Verb::from_str(v).unwrap(), };
Verb:       Verb = { VerbSingle, RelVerb };

Noun:      AST<'ast> = { Name, Decimal, Hex, Bin, Symbol, List, Dict, Sequence, Lambda, Ioverb };

Expr:      AST<'ast> = { Verbs, Adverbs, Call };

ExprVec<Atom>: Vec<Atom> = {
    <h:(<Atom?> ";")*> <t:Atom?> => {
        let mut r = vec![];
        for v in h {
            match v {
                Some(e) => { r.push(e); },
                None => { r.push( AST::Atom(Atom::Any) ); }
            }
        }
        match t {
            Some(e) => { r.push(e); },
            None => { r.push( AST::Atom(Atom::Any) ); }
        }
        r
    }
};
ExprList:  AST<'ast> = { ExprVec<Expr>  => AST::Vector(<>) };
NameList:  AST<'ast> = { ExprVec<Name>  => AST::Vector(<>) };
FieldList: AST<'ast> = { ExprVec<Expr>  => AST::Vector(<>) };

Dict:      AST<'ast> = { "["     <ExprList> "]"                        => dict(arena.ast(<>), arena), };
List:      AST<'ast> = { "(["    <c:NameList> "]" <m:FieldList> ")"    => table(arena.ast(c), arena.ast(m), arena),
                             "("     <ExprList> ")"                        => list(arena.ast(<>), arena), };

Lambda:    AST<'ast> = { "{["    <c:NameList> "]" <m:ExprList> "}"   => fun(arena.ast(c), arena.ast(m), arena),
                             "{"     <m:ExprList> "}"                    => fun(arena.nil(), arena.ast(m), arena), };

Verbs:     AST<'ast> = {          <v:Verb>              => verb(v, arena.nil(), arena.nil(), arena),
                                      <v:Verb>     <r:Expr> => verb(v, arena.nil(), arena.ast(r), arena), };
Adverbs:   AST<'ast> = {          <a:Adverb>            => adverb(a, arena.nil(), arena.nil(), arena),
                                      <v:Adverb>   <r:Expr> => adverb(v, arena.nil(), arena.ast(r), arena), };
Call:      AST<'ast> = {      Noun, <c:Noun>   <a:Call> => call(arena.ast(c), arena.ast(a), arena),
                               <l:Noun> <a:Adverb>          => adverb(a, arena.ast(l), arena.nil(), arena),
                               <l:Noun> <v:Verb>            => verb(v, arena.ast(l), arena.nil(), arena),
                               <l:Noun> <a:Adverb> <r:Expr> => adverb(a, arena.ast(l), arena.ast(r), arena),
                               <l:Noun> <v:Verb>   <r:Expr> => verb(v, arena.ast(l), arena.ast(r), arena), };

pub Mex:   AST<'ast> = { ExprList };
