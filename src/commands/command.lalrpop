
// O-interpreter

use commands::ast::*;
use core::str::FromStr;
grammar;

pub Number:         AST = { <n:r"\d+"> => AST::Number( u64::from_str(n).unwrap()), };
pub Hexlit:         AST = { <h:r"0x[a-zA-Z\d]+"> => AST::Number( u64::from_str_radix(&h[2..], 16).unwrap()), };
pub Bool:           AST = { <b:r"[01]+b"> => AST::Bool(bool::from_str(b).unwrap()), };
pub Name:           AST = { <n:r"[a-zA-Z][-a-zA-Z\d]*"> => AST::Name(String::from(n)), };
pub Symbol:         AST = { <s:r"`([a-z.][a-z0-9.]*)?"> => AST::Symbol(String::from(s)), };
pub Ioverb:         AST = { <i:r"\d:"> => AST::Ioverb(String::from(i)), };

pub Adverb:      Adverb = { <a:r"['\x5C\x2F]:?"> => Adverb::from_str(a).unwrap(), };
pub Verb:          Verb = { <v:r"[+\x2D*%!&|<>=~,^#_$?@.]"> => Verb::from_str(v).unwrap(), };
pub Noun:           AST = { Name, Number, Hexlit, Bool, Symbol, Lambda, List, Call, Dict };

pub Mex:            AST = { Expr, <o:Expr> "\n" <m:Mex> => AST::Cons(Box::new(o),Box::new(m)), };
pub Expr:           AST = { Noun, Statement };
pub Assign:         AST = { <n:Name> ":" <o:Expr> => AST::Assign(Box::new(n),Box::new(o)) };
pub List:           AST = { "(" ")" => AST::Nil, "(" <l:RawList> ")" => AST::List(Box::new(l)), };
pub Dict:           AST = { "[" "]" => AST::Nil, "[" <l:RawDict> "]" => AST::Dict(Box::new(l)), };
pub Args:           AST = { "[" "]" => AST::Nil, "[" <l:RawList> "]" => l, };

pub Call:           AST = { <c:Noun> <a:Args> => AST::Call(Box::new(c),Box::new(a)), };
pub Lambda:         AST = { Lambda1, Lambda2 };
pub Lambda1:        AST = { "{" "[" <c:RawList> "]" <m:Mex> "}" => AST::Lambda(Box::new(c),Box::new(m)), };
pub Lambda2:        AST = { "{" <m:Mex> "}" => AST::Lambda(Box::new(AST::Nil),Box::new(m)), };

pub Statement:      AST = { <l:Expr> <v:Verb> <r:Noun> => AST::Sentence(Box::new(l),v,Box::new(r)),
                            <v:Verb> <a:Adverb> <n:Noun> => AST::Sentence(Box::new(AST::Adverb(a)),v,Box::new(n)) };

pub CommaList:      AST = { "," <m:RawList> => m };
pub RawList:        AST = { <o:Expr> => AST::Cons(Box::new(o),Box::new(AST::Nil)),
                            <o:Expr> <m:CommaList> => AST::Cons(Box::new(o),Box::new(m)), };

pub SemiDict:       AST = { ";" <m:RawDict> => m };
pub RawDict:        AST = { <o:Assign> => AST::Cons(Box::new(o),Box::new(AST::Nil)),
                            <o:Assign> <m:SemiDict> => AST::Cons(Box::new(o),Box::new(m)), };
