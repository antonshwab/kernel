
// O: The Kernel DSL LR(1) formal grammar by 5HT et all.

use commands::ast;
use commands::ast::*;
use core::str::FromStr;
grammar;

// Three Type of Brackets and Their Lists 11 LOC

NounCont:  AST = { ";" => AST::Nil, ";" <m:NounList>         => m };
DictCont:  AST = { ";" => AST::Nil, ";" <m:DictList>         => m };
ExprCont:  AST = { ";" => AST::Nil, ";" <m:ExprList>         => m };
List:      AST = { "(" ")" => AST::Nil, "(" <l:ExprList> ")" => list(l), };
Dict:      AST = { "[" "]" => AST::Nil, "[" <l:DictList> "]" => dict(l), };
Args:      AST = { "[" <l:ExprList> "]"                      => l, };
NounList:  AST = { Noun,    <o:Noun>   <m:NounCont>          => cons(o,m), };
ExprList:  AST = { Expr,    <o:Expr>   <m:ExprCont>          => cons(o,m), };
DictList:  AST = { KeyVal,  <o:KeyVal> <m:DictCont>          => cons(o,m), };
Call:      AST = { <c:Noun> <a:Applicable>                   => call(c,a), };
Lambda:    AST = { "{" "[" <c:NounList> "]" <m:ExprList> "}" => fun(c,m),
                   "{" <m:ExprList> "}"                      => fun(AST::Nil,m),
                   "{" "}"                                   => fun(AST::Nil,AST::Nil)};

// Expressions and Statements 5 LOC

Noun:      AST = { Name, Number, Hexlit, Bool, Symbol, List, Dict, Sequence, Call, Lambda };
Applicable:AST = { Name, Lambda, Bool, Hexlit, Number, Symbol, Sequence, List, Args };
Expr:      AST = { Noun, Assign, Ioverb, Adverb2, Verb2 };
pub Mex:   AST = { ExprList, <o:ExprList> "\n" <m:Mex>       => cons(o,m), };
Verb2:     AST = { <v:Verb>                                  => verb(v,AST::Nil,AST::Nil),
                   <v:Verb> <a:Adverb>   <r:Expr>            => adverb2(a,v,r),  // Verb dic
                   <l:Noun> <v:Verb>     <r:Expr>            => verb(v,l,r), };
Adverb2:   AST = { <l:Noun> <v:Adverb>   <r:Expr>            => adverb(v,l,r),
                   <a:Adverb> <e:Expr>                       => adverb(a,AST::Nil,e),
                   <a:Adverb>                                => adverb(a,AST::Nil,AST::Nil), };
KeyVal:    AST = { <n:Name> ":" <o:Expr>                     => assign(n,o), };
Assign:    AST = { KeyVal,  <n:Call> ":" <o:Expr>            => assign(n,o), };

// Nouns 8 LOC

Number:    AST = { <n:r"\d+">                                => AST::Number(u64::from_str(n).unwrap()), };
Hexlit:    AST = { <h:r"0x[a-zA-Z\d]+">                      => AST::Number(u64::from_str_radix(&h[2..], 16).unwrap()), };
Bool:      AST = { <b:r"[01]+b">                             => AST::Number(u64::from_str_radix(&b[0..b.len()-1], 2).unwrap()), };
Name:      AST = { <n:r"[a-zA-Z][-a-zA-Z\d]*">               => AST::Name(String::from(n)), };
Symbol:    AST = { <s:r"`([a-z.][a-z0-9.]*)?">               => AST::Symbol(String::from(s)), };
Adverb: Adverb = { <a:r"[\x27:\x5C\x2F]:?">                  => Adverb::from_str(a).unwrap(), };
Verb:     Verb = { <v:r"[+\x2D*%!&|<>=~,^#_$?@\.]">          => Verb::from_str(v).unwrap(), };
Ioverb:    AST = { <i:r"\d+:"> <e:Expr>                      => AST::Ioverb(String::from(i),Box::new(e)), };
Sequence:  AST = { <s:r"\x22[^\x22]*\x22">                   => AST::Sequence(String::from(&s[1..s.len()-1])), };
