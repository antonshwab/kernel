
// M-expressions grammar

use core::ops::Deref;
use commands::ast::AST;
use std::str::FromStr;
grammar;

pub Mex:       AST = { Integer, Symbol, Float,
                       "fn" "[" <c:CommaList> "]" => AST::Lambda(Box::new(c)), };
pub Integer:   AST = { <n:r"\d+"> => AST::Integer(u64::from_str(n).unwrap()), };
pub Symbol:    AST = { <s:r"[a-zA-Z][a-zA-Z0-9]*"> => AST::Symbol(String::from(s)), };
pub Float:     AST = { <f:r"\d+\.\d+"> => AST::Float(f64::from_str(f).unwrap()), };
pub CommaList: AST = { <c:Symbol> => AST::Cons(Box::new(c),Box::new(AST::Nil)),
                       <c:Symbol> "," <e:CommaList> => AST::Cons(Box::new(c),Box::new(e)), };
