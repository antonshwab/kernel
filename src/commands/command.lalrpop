
// M-expressions grammar

use commands::ast::AST;
use core::str::FromStr;
grammar;

pub Mex:       AST = { Operator, <o:Operator> Whitespace <m:Mex> => AST::Cons(Box::new(o),Box::new(m)), };
pub Operator:  AST = { Expr, Call, Lambda };
pub Call:      AST = { <s:Symbol> "[" <c:CommaList> "]" => AST::Call(Box::new(s),Box::new(c)), };
pub Lambda:    AST = { "{" "[" <c:CommaList> "]" <body:Mex> "}" => AST::Lambda(Box::new(c),Box::new(body)), };
pub Whitespace:AST = { "\n" => AST::Nil, "\t" => AST::Nil, "\r" => AST::Nil, "\s" => AST::Nil };
pub Terminal:  AST = { Symbol, Integer, Float };
pub Term:      AST = { Terminal, "(" <Expr> ")" };
pub Reduce:    AST = { "/" <s:Symbol> => AST::Reduce(Box::new(s)), };
pub Integer:   AST = { <n:r"\d+"> => AST::Integer(u64::from_str(n).unwrap()), };
pub Symbol:    AST = { <s:r"[a-zA-Z][-a-zA-Z0-9]*"> => AST::Symbol(String::from(s)), };
pub Float:     AST = { <f:r"\d+\.\d+"> => AST::Float(f64::from_str(f).unwrap()), };
pub CommaList: AST = { <c:Mex> => AST::Cons(Box::new(c),Box::new(AST::Nil)),
                       <c:Mex> "," <e:CommaList> => AST::Cons(Box::new(c),Box::new(e)), };
pub Expr:      AST = { <l:Expr> "+" <r:Term> => AST::Plus(Box::new(l),Box::new(r)),
                       <l:Expr> "*" <r:Term> => AST::Mul(Box::new(l),Box::new(r)),
                       <l:Expr> "%" <r:Term> => AST::Div(Box::new(l),Box::new(r)),
                       <l:Expr> "-" <r:Term> => AST::Minus(Box::new(l),Box::new(r)), Term };
//pub Factor:    AST = { <l:Factor> "*" <r:Term> => AST::Mul(Box::new(l),Box::new(r)),
//                       <l:Factor> "%" <r:Term> => AST::Div(Box::new(l),Box::new(r)), Factor, };
