
// O: The Language

use commands::ast;
use commands::ast::*;
use core::str::FromStr;

grammar<'ast>(arena: &'ast Arena<'ast>);

pub Mex:   &'ast AST<'ast> = { ExprList };


// Three Type of Brackets and Their Lists 9 LOC

List:      &'ast AST<'ast> = { "(" ")" => nil(arena), "(" <l:ExprList> ")" => list(l, arena), };
Dict:      &'ast AST<'ast> = { "[" "]" => nil(arena), "[" <l:ExprList> "]" => dict(l, arena), };

Lambda:    &'ast AST<'ast> = { "{" <m:ExprList> "}"          => fun(nil(arena),m, arena),
                   "{[" <c:NameList> "]" <m:ExprList> "}"    => fun(c,m, arena),
                   "{" "}"                                   => fun(nil(arena),nil(arena), arena) };

Call:      &'ast AST<'ast> = { <c:Noun> <a:CallCont>                     => call(c,a, arena), };
NameList:  &'ast AST<'ast> = { Name, <o:Name> <m:NameCont>               => cons(o,m, arena), };
ExprList:  &'ast AST<'ast> = { ExprCont, Expr, <o:Expr> <m:ExprCont>     => cons(o,m, arena), };

CallCont:  &'ast AST<'ast> = { Noun, <m:Call>                            => m };
NameCont:  &'ast AST<'ast> = { ";" => nil(arena), ";" <m:NameList>         => m };
ExprCont:  &'ast AST<'ast> = { ";" => nil(arena), ";" <m:ExprList>         => m };


// Expressions and Statements 4 LOC

Noun:      &'ast AST<'ast> = { Name, Number, Hexlit, Bool, Symbol, List, Dict, Sequence, Lambda, Ioverb };
Expr:      &'ast AST<'ast> = { Noun, Call, Verbs, Adverbs, };

Verbs:     &'ast AST<'ast> = {           <v:Verb>   => verb(v,nil(arena),nil(arena), arena),
                   <l:Call>  <v:Verb>               => verb(v,l,nil(arena), arena),
                   <l:Noun>  <v:Verb>               => verb(v,l,nil(arena), arena),
                             <v:Verb>     <r:Expr>  => verb(v,nil(arena),r, arena),
                   <l:Call>  <v:Verb>     <r:Expr>  => verb(v,l,r, arena),
                   <l:Noun>  <v:Verb>     <r:Expr>  => verb(v,l,r, arena), };

Adverbs:   &'ast AST<'ast> = {<a:Adverb>            => adverb(a,nil(arena),nil(arena), arena),
                   <l:Call>  <a:Adverb>             => adverb(a,l,nil(arena), arena),
                   <l:Noun>  <a:Adverb>             => adverb(a,l,nil(arena), arena),
                             <a:Adverb>   <e:Expr>  => adverb(a,nil(arena),e, arena),
                   <l:Call>  <a:Adverb>   <r:Expr>  => adverb(a,l,r, arena),
                   <l:Noun>  <a:Adverb>   <r:Expr>  => adverb(a,l,r, arena), };

// NOM: Tokenizer

Number:    &'ast AST<'ast> = { <n:r"\d+">                         => alloc(AST::Number(i64::from_str(n).unwrap()), arena), };
Hexlit:    &'ast AST<'ast> = { <h:r"0x[a-zA-Z\d]+">               => alloc(AST::Number(i64::from_str_radix(&h[2..], 16).unwrap()), arena), };
Bool:      &'ast AST<'ast> = { <b:r"[01]+b">                      => alloc(AST::Number(i64::from_str_radix(&b[0..b.len()-1], 2).unwrap()), arena), };
Name:      &'ast AST<'ast> = { <n:r"[a-zA-Z][a-zA-Z\d]*">         => alloc(AST::Name(String::from(n)), arena), };
Symbol:    &'ast AST<'ast> = { <s:r"`([a-z][a-z0-9]*)?">          => alloc(AST::Symbol(String::from(&s[1..s.len()])), arena), };
Adverb: Adverb = { <a:r"[\x27:\x5C\x2F]:?">                       => Adverb::from_str(a).unwrap(), };
Verb:     Verb = { <v:r"[+\x2D*$%!&|<>=~,^#_?@.]">                => Verb::from_str(v).unwrap(), };
Ioverb:    &'ast AST<'ast> = { <i:r"\d+:">                        => alloc(AST::Ioverb(String::from(i), ), arena), };
Sequence:  &'ast AST<'ast> = { <s:r"\x22(\\.|[^\x5C\x22])*\x22">  => alloc(AST::Sequence(String::from(&s[1..s.len()-1])), arena), };
